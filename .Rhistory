shiny::runApp('C:/Users/wb480070/OneDrive - WBG/Desktop/GFDRR Github Code/GFDRR_Grant-Monitoring-master')
shiny::runApp('C:/Users/wb480070/OneDrive - WBG/Desktop/GFDRR Github Code/GFDRR_Grant-Monitoring-master')
setwd("C:/Users/wb480070/OneDrive - WBG/Desktop/GFDRR Github Code/GFDRR_Grant-Monitoring-master")
source("global.R")
source("Raw_data_to_excel.r")
openxlsx::openXL(wb)
source("global.R")
source("Raw_data_to_excel.r")
openxlsx::openXL(wb)
date_data_udpated
source("global.R")
source("Raw_data_to_excel.r")
openxlsx::openXL(wb)
source("global.R")
source("Raw_data_to_excel.r")
openxlsx::openXL(wb)
source("global.R")
source("Raw_data_to_excel.r")
openxlsx::openXL(wb)
source("global.R")
source("Raw_data_to_excel.r")
openxlsx::openXL(wb)
str(all_grants)
1:nrow(all_grants)+1
dollar_format <- createStyle(numFmt = "ACCOUNTING")
percent_format <- createStyle(numFmt = "0%")
date_format <- createStyle(numFmt = "mm/dd/yyyy")
num_format <- createStyle(numFmt = "NUMBER")
wrapped_text <- createStyle(wrapText = TRUE,valign = "top")
black_and_bold <- createStyle(fontColour = "#000000",textDecoration = 'bold')
addStyle(wb,1,rows=1:nrow(all_grants)+1,cols=25,style=date_format)
openXL(wb)
55*373
55*373*.7
14360/4
3590-2000
1590/4
1590/5
14360/3
4786-2000
all_grants_row_range <- 1:nrow(all_grants)+1
addStyle(wb,1,rows=all_grants_row_range,cols=25,style=date_format)   #activation date
addStyle(wb,1,rows=all_grants_row_range,cols=26,style=date_format)   #closing date
addStyle(wb,1,rows=all_grants_row_range,cols=27,style=dollar_format) #grant amount
addStyle(wb,1,rows=all_grants_row_range,cols=28,style=dollar_format) #cumulative disbursements
addStyle(wb,1,rows=all_grants_row_range,cols=29,style=dollar_format) #2020 disbursements
addStyle(wb,1,rows=all_grants_row_range,cols=30,style=dollar_format) #commitments
addStyle(wb,1,rows=all_grants_row_range,cols=31,style=dollar_format) #available balance
addStyle(wb,1,rows=all_grants_row_range,cols=32,style=dollar_format) #real- transfer-in
addStyle(wb,1,rows=all_grants_row_range,cols=33,style=dollar_format) #Not yet Transferred
openXL(wb)
?openXL
active_grants_row_range <- 8:nrow(active_grants)+1
addStyle(wb,2,rows=active_grants_row_range,cols=27,style=date_format)   #activation date
addStyle(wb,2,rows=active_grants_row_range,cols=28,style=date_format)   #closing date
addStyle(wb,2,rows=active_grants_row_range,cols=29,style=dollar_format) #grant amount
addStyle(wb,2,rows=active_grants_row_range,cols=20,style=dollar_format) #cumulative disbursements
addStyle(wb,2,rows=active_grants_row_range,cols=22,style=dollar_format) #2020 disbursements
addStyle(wb,2,rows=active_grants_row_range,cols=22,style=dollar_format) #commitments
addStyle(wb,2,rows=active_grants_row_range,cols=23,style=dollar_format) #real- transfer-in
addStyle(wb,2,rows=active_grants_row_range,cols=24,style=dollar_format) #Not yet Transferred
addStyle(wb,2,rows=active_grants_row_range,cols=25,style=dollar_format) #available balance
addStyle(wb,2,rows=active_grants_row_range,cols=27,style=percent_format) #required monthly disbursement rate
openXL(wb)
source("global.R")
source("Raw_data_to_excel.r")
openxlsx::openXL(wb)
addStyle(wb,2,rows = 8,cols = 1:ncol(active_grants),style = wrapped_text,stack = TRUE)
openXL(wb)
setColWidths(wb,2,cols = 7,widths = 30)
setColWidths(wb,2, cols = 10,widths = 12)
setColWidths(wb,2,cols = 17:28,widths = 15)
openXL(wb)
source("global.R")
source("Raw_data_to_excel.r")
openxlsx::openXL(wb)
source("global.R")
source("Raw_data_to_excel.r")
openxlsx::openXL(wb)
source("global.R")
source("Raw_data_to_excel.r")
openxlsx::openXL(wb)
openXL(wb)
addStyle(wb,4,rows=1:nrow(trustee)+1,cols=5,style=date_format,stack = TRUE)
setColWidths(wb,4, cols = 1:ncol(trustee), widths = "auto")
openXL(wb)
shiny::runApp()
runApp()
runApp()
sum(active_trustee$`Net Signed Condribution in USD`) %>%
dollar(accuracy = 1) %>% as.character()
runApp()
?renderText
runApp()
rep(" ",20)
runApp()
paste0("Total Pledged (Across Active Trustees)",rep(" ",20))
runApp()
title_with_button <-  function(title,id_name){HTML(paste0(title,
"<button id=",id_name,
" type=\"button\"",
"class=\"btn btn-default action-button\"",
"style=\"padding:2px; font-size:80%\">Show</button>")
)
}
if (interactive()) {
shinydashboardPlusGallery()
}
library(shiny)
library(shinydashboard)
library(shinyjs)
library(shinyBS)
data <- iris
ui <- tagList(
useShinyjs(),
dashboardPage(
dashboardHeader(title = "Telemedicine HP"),
dashboardSidebar(),
dashboardBody(
fluidRow(
div(id='clickdiv',
valueBox(60, subtitle = tags$p("Attended", style = "font-size: 200%;"), icon = icon("trademark"), color = "purple", width = 4, href = NULL)
)
)
)
)
)
server <-  function(input, output, session){
onclick('clickdiv', showModal(modalDialog(
title = "Your title",
renderDataTable(data)
)))
}
shinyApp(ui, server)
install.packages('tippy')
library(tippy)
tippy("Hover me!", tooltip = "Hi, I'm the tooltip!")
tippy("Hover me!", tooltip = "Hi, I'm the tooltip!", placement = "right",
theme = "light")
tippy("Hover me!", tooltip = "Hi, I'm the tooltip!", animation = "scale",
duration = 1000, placement = "bottom")
tippy("Click me!", tooltip = "Hi, I'm the tooltip!", trigger = "click",
theme = "light")
# use tooltip on other elements.
if(interactive()){
library(shiny)
shinyApp(
ui = fluidPage(
textInput("input", "input with tooltip"),
tippy("Some text", tooltip = "Tiiiip"),
tippy_this("input", "Tooltip", placement = "right")
),
server = function(input, output) {}
)
}
library(shiny)
ui <- fluidPage(
textInput("text_inputId", "Enter some text"),
actionButton("submit_inputId", "Submit text"),
verbatimTextOutput("print")
)
server <- function(input, output){
txt <- eventReactive(input$submit_inputId, {
input$text_inputId
})
output$print <- renderPrint(txt())
}
shinyApp(ui, server)
install.packages('cicerone')
library(cicerone)
guide <- Cicerone$
new()$
step(
el = "text_inputId",
title = "Text Input",
description = "This is where you enter the text you want to print."
)$
step(
"submit_inputId",
"Send the Text",
"Send the text to the server for printing"
)
library(shiny)
ui <- fluidPage(
use_cicerone(), # include dependencies
textInput("text_inputId", "Enter some text"),
actionButton("submit_inputId", "Submit text"),
verbatimTextOutput("print")
)
server <- function(input, output){
# initialise then start the guide
guide$init()$start()
txt <- eventReactive(input$submit_inputId, {
input$text_inputId
})
output$print <- renderPrint(txt())
}
shinyApp(ui, server)
library(shiny)
ui <- fluidPage(
textInput("text_inputId", "Enter some text"),
actionButton("submit_inputId", "Submit text"),
verbatimTextOutput("print")
)
server <- function(input, output){
txt <- eventReactive(input$submit_inputId, {
input$text_inputId
})
output$print <- renderPrint(txt())
}
shinyApp(ui, server)
guide <- Cicerone$
new()$
step(
el = "text_inputId",
title = "Text Input",
description = "This is where you enter the text you want to print."
)$
step(
"submit_inputId",
"Send the Text",
"Send the text to the server for printing"
)
library(shiny)
ui <- fluidPage(
use_cicerone(), # include dependencies
textInput("text_inputId", "Enter some text"),
actionButton("submit_inputId", "Submit text"),
verbatimTextOutput("print")
)
server <- function(input, output){
# initialise then start the guide
guide$init()$start()
txt <- eventReactive(input$submit_inputId, {
input$text_inputId
})
output$print <- renderPrint(txt())
}
shinyApp(ui, server)
ui <- fluidPage(
use_cicerone(), # include dependencies
textInput("text_inputId", "Enter some text"),
actionButton("submit_inputId", "Submit text"),
verbatimTextOutput("print")
)
server <- function(input, output){
# initialise then start the guide
guide$init()$start()
txt <- eventReactive(input$submit_inputId, {
input$text_inputId
})
output$print <- renderPrint(txt())
}
shinyApp(ui, server)
active_trustee$Fund
runApp()
active_trustee %>% names()
runApp()
names(active_trustee)
View(active_trustee)
98463442
98463442-96136746.4
98463442-96136746
98463442-1344379
net <- active_trustee$`Net Signed Condribution in USD`
net
inv <- active_trustee$`Inv. Income USD`
rec <- active_trustee$`Other Receipts USD`
admin <- active_trustee$`Admin Fee USD`
trans_funds <- active_trustee$`Transfers to other Main Funds USD`
trans_out <- active_trustee$`Transfers-out in USD`
trans_out
net-inv+rec-admin-trans_funds
net-inv+rec-admin-trans_funds-trans_out
(net-inv+rec-admin-trans_funds-trans_out)=active_trustee$`Available Balance USD`
(net-inv+rec-admin-trans_funds-trans_out)==active_trustee$`Available Balance USD`
(net-inv+rec-admin-trans_funds-trans_out) - active_trustee$`Available Balance USD`
(net-inv+rec-admin-trans_funds-trans_out) - active_trustee$`Available Balance USD`
(net+inv+rec-admin-trans_funds-trans_out)==active_trustee$`Available Balance USD`
(net+inv+rec-admin-trans_funds-trans_out)-active_trustee$`Available Balance USD`
(net+inv+rec-admin-trans_funds-trans_out)
(net+inv+rec-admin-trans_funds-trans_out)-active_trustee$`Net Unpaid contribution in USD`
(net+inv+rec-admin-trans_funds-trans_out)-active_trustee$`Net Unpaid contribution in USD`
sum(1,2)
names(active_trustee)
runApp()
runApp()
runApp()
runApp()
